{"ast":null,"code":"var _jsxFileName = \"/Users/josedeligne/Code/personalProjects/smallProjects/MazeSolver/src/Components/MazeComponents/Maze.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { GetWallCreationStatus, GetDeleteWallsStatus, GetStartingPointActiveStatus } from '../../Context/MenuSelectionContext';\nimport GridBox from './GridBox';\nimport classes from './Maze.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Maze = props => {\n  _s();\n\n  let rows = props.dim[0];\n  let columns = props.dim[1];\n  let heightPerBox = 100 / rows;\n  let widthPerBox = 100 / columns;\n  const [createWallPressed, setCreateWallPressed] = useState(false);\n  const [startingPoint, setStartingPoint] = useState();\n  const wallCreationStatus = GetWallCreationStatus();\n  const wallDeletionStatus = GetDeleteWallsStatus();\n  const startingButtonStatus = GetStartingPointActiveStatus();\n  let squareStyle = {\n    display: 'grid',\n    height: '100%',\n    gridTemplateColumns: `repeat(${columns},${widthPerBox}%)`,\n    gridTemplateRows: `repeat(${rows},${heightPerBox}%)`,\n    background: 'grey'\n  };\n\n  const handleMouseDown = value => {\n    if (wallCreationStatus || wallDeletionStatus) {\n      setCreateWallPressed(true);\n    }\n  };\n\n  const handleMouseUp = (event, value) => {\n    if (wallCreationStatus || wallDeletionStatus) {\n      setCreateWallPressed(false);\n    }\n  };\n\n  const changeStartingPoint = position => {\n    console.log(changeStartingPoint);\n  };\n\n  const createBoxGrid = () => {\n    // Create 2d array for each box\n    const mazeMap = [];\n\n    for (let i = rows - 1; i >= 0; i--) {\n      for (let j = 0; j < columns; j++) {\n        mazeMap.push([i, j]);\n      }\n    } //creates jsx to display boxes\n\n    /*\n    let displayGrid = mazeMap.map((position) => {\n        return(\n            <GridBox \n             cord={position}\n             bPressed={handleMouseDown} \n             bReleased={handleMouseUp}\n             wallBlock={createWallPressed}\n            />\n        );\n    });\n    */\n\n\n    let displayGrid = mazeMap.map(position => {\n      return [position, /*#__PURE__*/_jsxDEV(GridBox, {\n        cord: position,\n        bPressed: handleMouseDown,\n        bReleased: handleMouseUp,\n        wallBlock: createWallPressed,\n        setStarting: changeStartingPoint\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, this)];\n    });\n    console.log('Complete');\n    return displayGrid;\n  };\n\n  let mazeMap = createBoxGrid();\n  console.log(mazeMap);\n  let displayGrid = mazeMap.map(position => {\n    return position[1];\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: props.className,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: squareStyle,\n      children: displayGrid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Maze, \"WEVNc9hOFjCH8/y2vU5dJpCiX/o=\");\n\n_c = Maze;\nexport default Maze;\n\nvar _c;\n\n$RefreshReg$(_c, \"Maze\");","map":{"version":3,"sources":["/Users/josedeligne/Code/personalProjects/smallProjects/MazeSolver/src/Components/MazeComponents/Maze.js"],"names":["React","useState","GetWallCreationStatus","GetDeleteWallsStatus","GetStartingPointActiveStatus","GridBox","classes","Maze","props","rows","dim","columns","heightPerBox","widthPerBox","createWallPressed","setCreateWallPressed","startingPoint","setStartingPoint","wallCreationStatus","wallDeletionStatus","startingButtonStatus","squareStyle","display","height","gridTemplateColumns","gridTemplateRows","background","handleMouseDown","value","handleMouseUp","event","changeStartingPoint","position","console","log","createBoxGrid","mazeMap","i","j","push","displayGrid","map","className"],"mappings":"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","sourcesContent":["import React,{useState} from 'react';\nimport {GetWallCreationStatus, GetDeleteWallsStatus, GetStartingPointActiveStatus} from '../../Context/MenuSelectionContext';\nimport GridBox from './GridBox';\nimport classes from './Maze.module.css';\n\nconst Maze = (props) => {\n    let rows = props.dim[0];\n    let columns = props.dim[1];\n    let heightPerBox = 100/rows;\n    let widthPerBox = 100/columns;\n\n    const [createWallPressed, setCreateWallPressed] = useState(false);\n    const [startingPoint, setStartingPoint] = useState();\n    const wallCreationStatus = GetWallCreationStatus();\n    const wallDeletionStatus = GetDeleteWallsStatus();\n    const startingButtonStatus = GetStartingPointActiveStatus();\n    \n    let squareStyle = {\n        display: 'grid',\n        height: '100%',\n        gridTemplateColumns: `repeat(${columns},${widthPerBox}%)`,\n        gridTemplateRows: `repeat(${rows},${heightPerBox}%)`,\n        background: 'grey'\n    };\n\n\n    const handleMouseDown = (value) => {\n        if (wallCreationStatus || wallDeletionStatus){\n            setCreateWallPressed(true)\n        }\n    };\n\n    const handleMouseUp = (event, value) => {\n        if (wallCreationStatus || wallDeletionStatus){\n            setCreateWallPressed(false);\n        }\n    };\n\n    const changeStartingPoint = (position) => {\n        console.log(changeStartingPoint);\n    };\n\n\n    const createBoxGrid = () => {\n        // Create 2d array for each box\n        const mazeMap = [];\n        for (let i = rows-1; i >= 0; i--){\n            for (let j = 0; j < columns; j++) {\n                mazeMap.push([i,j]);\n            }\n        }\n        //creates jsx to display boxes\n        /*\n        let displayGrid = mazeMap.map((position) => {\n            return(\n                <GridBox \n                 cord={position}\n                 bPressed={handleMouseDown} \n                 bReleased={handleMouseUp}\n                 wallBlock={createWallPressed}\n                />\n            );\n        });\n        */\n       let displayGrid = mazeMap.map((position) => {\n            return(\n                [\n                    position,\n                    <GridBox \n                    cord={position}\n                    bPressed={handleMouseDown} \n                    bReleased={handleMouseUp}\n                    wallBlock={createWallPressed}\n                    setStarting={changeStartingPoint}\n                    />\n                ]\n            );\n        });\n\n        console.log('Complete')\n        return displayGrid;\n    }\n\n\n    let mazeMap = createBoxGrid();\n    console.log(mazeMap);\n\n    let displayGrid = mazeMap.map((position) => {\n        return(position[1]);\n    });\n\n    return(\n        <div className={props.className}>\n            <div style={squareStyle}>\n                {displayGrid}\n            </div>\n        </div>\n    );\n};\n\nexport default Maze;"]},"metadata":{},"sourceType":"module"}