{"ast":null,"code":"var _jsxFileName = \"/Users/josedeligne/Code/personalProjects/smallProjects/MazeSolver/src/Components/MazeComponents/GridBox.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { GetWallCreationStatus, GetDeleteWallsStatus, GetStartingPointActiveStatus } from '../../Context/MenuSelectionContext';\nimport { GetStartingCell, SetStartingCell, GetGoalCell, SetGoalCell } from '../../Context/CellInfoContext';\nimport classes from './GridBox.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GridBox = props => {\n  _s();\n\n  const [backgroundColor, setBackgroundColor] = useState({\n    background: 'white'\n  });\n  const wallCreationStatus = GetWallCreationStatus();\n  const wallDeletionStatus = GetDeleteWallsStatus();\n  const startingButtonStatus = GetStartingPointActiveStatus();\n  const startingCellLocation = GetStartingCell();\n  const setStartingLocation = SetStartingCell();\n  const goalCellLocation = GetGoalCell();\n  const setGoalLocation = SetGoalCell();\n  const [isWall, setIsWall] = useState(false);\n  let row = props.cord[0];\n  let column = props.cord[1];\n  /*\n  let boxStyle = {\n      color: 'black',\n      background: 'white',\n      border: '1px solid black',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center'\n      \n  }\n  */\n\n  const getPosition = () => {\n    console.log(`row: ${row}. Column ${column}. Wall: ${isWall}`);\n  };\n\n  const hoverOverCellHandler = event => {\n    if (props.wallBlock) {\n      if (wallCreationStatus) {\n        setIsWall(true);\n        setBackgroundColor({\n          background: 'blue'\n        });\n      }\n\n      if (wallDeletionStatus) {\n        setIsWall(false);\n        setBackgroundColor({\n          background: 'white'\n        });\n      }\n    }\n  };\n\n  const clickedDownHandler = event => {\n    if (wallCreationStatus) {\n      setIsWall(true);\n      setBackgroundColor({\n        background: 'blue'\n      });\n      props.bPressed(props.cord);\n    }\n\n    if (wallDeletionStatus) {\n      setIsWall(false);\n      setBackgroundColor({\n        background: 'white'\n      });\n      props.bPressed(props.cord);\n    }\n  };\n\n  const clickedUpHandler = event => {\n    if (wallCreationStatus || wallDeletionStatus) {\n      props.bReleased(event, props.cord);\n    }\n  };\n\n  const setStartingPoint = event => {\n    if (startingButtonStatus) {\n      setStartingLocation(props.cord);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.boxStyle,\n    style: backgroundColor,\n    onClick: setStartingPoint,\n    onMouseDown: clickedDownHandler,\n    onMouseUp: clickedUpHandler,\n    onMouseEnter: hoverOverCellHandler,\n    children: `(${row},${column})`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GridBox, \"64uSKdjg3LuUBQoooF9OgVRXBQQ=\");\n\n_c = GridBox;\nexport default GridBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"GridBox\");","map":{"version":3,"sources":["/Users/josedeligne/Code/personalProjects/smallProjects/MazeSolver/src/Components/MazeComponents/GridBox.js"],"names":["React","useState","GetWallCreationStatus","GetDeleteWallsStatus","GetStartingPointActiveStatus","GetStartingCell","SetStartingCell","GetGoalCell","SetGoalCell","classes","GridBox","props","backgroundColor","setBackgroundColor","background","wallCreationStatus","wallDeletionStatus","startingButtonStatus","startingCellLocation","setStartingLocation","goalCellLocation","setGoalLocation","isWall","setIsWall","row","cord","column","getPosition","console","log","hoverOverCellHandler","event","wallBlock","clickedDownHandler","bPressed","clickedUpHandler","bReleased","setStartingPoint","boxStyle"],"mappings":"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","sourcesContent":["import React,{useState} from 'react';\nimport {GetWallCreationStatus, GetDeleteWallsStatus, GetStartingPointActiveStatus} from '../../Context/MenuSelectionContext';\nimport {GetStartingCell, SetStartingCell, GetGoalCell, SetGoalCell} from '../../Context/CellInfoContext';\nimport classes from './GridBox.module.css';\n\nconst GridBox = (props) => {\n    const [backgroundColor, setBackgroundColor] = useState({\n        background: 'white'\n    });\n\n    const wallCreationStatus = GetWallCreationStatus();\n    const wallDeletionStatus = GetDeleteWallsStatus();\n    const startingButtonStatus = GetStartingPointActiveStatus();\n\n    const startingCellLocation = GetStartingCell();\n    const setStartingLocation = SetStartingCell();\n    const goalCellLocation = GetGoalCell();\n    const setGoalLocation = SetGoalCell();\n\n    const [isWall, setIsWall] = useState(false);\n\n\n    let row = props.cord[0];\n    let column = props.cord[1];\n    /*\n    let boxStyle = {\n        color: 'black',\n        background: 'white',\n        border: '1px solid black',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n        \n    }\n    */\n\n    const getPosition = () => {\n        console.log(`row: ${row}. Column ${column}. Wall: ${isWall}`)\n    }\n\n    const hoverOverCellHandler = (event) => {\n        if (props.wallBlock) {\n\n            if (wallCreationStatus) {\n                setIsWall(true)\n                setBackgroundColor({\n                    background: 'blue'\n                });\n            }\n\n            if (wallDeletionStatus) {\n                setIsWall(false)\n                setBackgroundColor({\n                    background: 'white'\n                })\n            }\n\n        }\n    };\n\n    const clickedDownHandler = (event) => {\n        if (wallCreationStatus){\n            setIsWall(true)\n            setBackgroundColor({\n                background: 'blue'\n            })\n            props.bPressed(props.cord)\n        }\n\n        if (wallDeletionStatus){\n            setIsWall(false)\n            setBackgroundColor({\n                background: 'white'\n            })\n            props.bPressed(props.cord)\n        }\n    };\n\n    const clickedUpHandler = (event) => {\n        if (wallCreationStatus || wallDeletionStatus){\n            props.bReleased(event, props.cord)\n        }\n    }\n\n    const setStartingPoint = (event) => {\n        if (startingButtonStatus){\n            setStartingLocation(props.cord)\n        }\n    }\n\n\n    return(\n        <div \n         className={classes.boxStyle}\n         style={backgroundColor} \n         onClick={setStartingPoint} \n         onMouseDown={clickedDownHandler}\n         onMouseUp={clickedUpHandler}\n         onMouseEnter={hoverOverCellHandler}\n         >\n            {`(${row},${column})`}\n        </div>\n    );\n};\n\nexport default GridBox;"]},"metadata":{},"sourceType":"module"}